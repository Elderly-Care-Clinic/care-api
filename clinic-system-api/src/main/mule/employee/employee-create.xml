<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:db="http://www.mulesoft.org/schema/mule/db" xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd">
	<sub-flow name="employee-create-sub-flow" doc:id="f1613877-04ab-4395-8fde-0db8e65da1fb" >
		<set-variable value="#[uuid()]" doc:name="Set Id" doc:id="39ef5164-aff5-4109-a22d-04110d3de422" variableName="uniqueId"/>
		<set-variable value="#[payload]" doc:name="Set InputPayload" doc:id="a6d599e6-01a4-410c-a392-5629d961557a" variableName="inputPayload"/>
		<set-variable value="#[output application/json&#10;var Id= randomInt(10000)&#10;var tempData = '1234567890qwertyuiop[asdfghjkl;zxcvbnm,./ZXCVBNM&lt;&gt;?ASDFGHJKL:&quot;QWERTYUIOP{!@#%^&amp;*()_'&#10;//In tempData variable I have stored all of the chars which I wants to allow in password&#10;fun myPassword(len) =&#10;    if(len==1)&#10;        tempData[(sizeOf(tempData) * random())]&#10;    else&#10;        (tempData[(sizeOf(tempData) * random())]) ++ myPassword(len - 1)&#10; &#10;---&#10;{&#10;  //username: payload.firstName ++ &quot;_&quot; ++ Id,&#10;  username: payload.emailId,&#10;  password: myPassword(10)&#10;&#10;}]" doc:name="Set Auto Generate" doc:id="cdb00c8b-8fb7-4b3b-89b0-88f8b49052e7" variableName="loginDetails"/>
		<db:insert doc:name="Insert Login" doc:id="2281fcc9-a087-4d2d-9a34-8a8518bc232d" config-ref="Database_Config">
			<db:sql ><![CDATA[insert into login
(username,password,selectHouse,
scope,isActive,uuid)
values
(:username,:password,:selectHouse,
:scope,:isActive,:uuid)]]></db:sql>
			<db:input-parameters ><![CDATA[#[output application/json  skipNullOn="everywhere"
--- 
{

 username : vars.loginDetails.username,
 password: vars.loginDetails.password,
 selectHouse: payload.home,
 scope: "employee",
 isActive: 1,
 uuid: vars.uniqueId


}]]]></db:input-parameters>
		</db:insert>
		<db:select doc:name="Get Id" doc:id="f5773407-d0d7-4957-bc51-1adff929ef71" config-ref="Database_Config" target="loginId">
			<db:sql><![CDATA[SELECT id from login where uuid= :uuid]]></db:sql>
			<db:input-parameters><![CDATA[#[uuid:  vars.uniqueId]]]></db:input-parameters>
		</db:select>
		<try doc:name="Try" doc:id="871f0bb5-ec15-4950-b87e-e8902946b9da" >
			<db:insert doc:name="employee create" doc:id="9de53750-f93c-4af7-a449-e5277ae95e95" config-ref="Database_Config">
			<db:sql><![CDATA[insert into employeeDetails
(title,
firstname,middlename,lastname,home,
gender,age,dateOfBirth,accountsRef,
maritalStatus,religion,nationality,
ethnicOrigin,department,status,
jobTitle,rotaCategory,supervisor,
keyWorker,displayOnRota,notes,
NINumber,NHSNumber,dbsNumber,
dbsDate,crbCleared,crbRiskassessed,
startDate,leaveDate,archiveEmployee,
extraInformation,employeephoto,employeebannercolour,employeeId,uuid,emailId
)

values 

(:title, :firstName, :middleName, :lastName, :home, :gender, :age, :dateOfBirth, :accountsRef, :maritalStatus, :religion, :nationality, :ethnicOrigin, :department, :status, :jobTitle, :rotaCategory, :supervisor, :keyWorker, :displayOnRota, :notes, :niNumber,:nhsNumber,:dbsNumber, :dbsDate, :crbCleared, :crbRiskassessed, :startDate, :leaveDate, :archiveEmployee, :extraInformation, :employeephoto, :employeebannercolour, :employeeId,
:uuid,:emailId
)

]]></db:sql>
			<db:input-parameters><![CDATA[#[output application/json  skipNullOn="everywhere"
--- 
 {
  "title": vars.inputPayload.title,
  "firstName": vars.inputPayload.firstName,
  "middleName": vars.inputPayload.middleName,
  "lastName": vars.inputPayload.lastName,
  "home": vars.inputPayload.home,
  "gender": vars.inputPayload.gender,
  "dateOfBirth": vars.inputPayload.dateOfBirth,
  "age": vars.inputPayload.age,
  "accountsRef": vars.inputPayload.accountsRef,
  "maritalStatus": vars.inputPayload.maritalStatus,
  "religion": vars.inputPayload.religion,
  "nationality": vars.inputPayload.nationality,
  "ethnicOrigin": vars.inputPayload.ethnicOrigin,
  "notes": vars.inputPayload.notes,
  "department": vars.inputPayload.department,
  "status": vars.inputPayload.status,
  "jobTitle": vars.inputPayload.jobTitle,
  "rotaCategory": vars.inputPayload.rotaCategory,
  "supervisor": vars.inputPayload.supervisor,
  "keyWorker": vars.inputPayload.keyWorker,
  "displayOnRota": vars.inputPayload.displayOnRota,
  "niNumber": vars.inputPayload.niNumber,
  "nhsNumber": vars.inputPayload.nhsNumber,
  "dbsNumber": vars.inputPayload.dbsNumber,
  "dbsDate": vars.inputPayload.dbsDate,
  "crbCleared": vars.inputPayload.crbCleared,
  "crbRiskassessed": vars.inputPayload.crbRiskassessed,
  "startDate": vars.inputPayload.startDate,
  "leaveDate": vars.inputPayload.leaveDate,
  "archiveEmployee": vars.inputPayload.archiveEmployee,
  "extraInformation": vars.inputPayload.extraInformation,
  "employeephoto": vars.inputPayload.employeephoto,
  "employeebannercolour": vars.inputPayload.employeebannercolour,
  employeeId: vars.loginId.id[0],
   uuid: vars.uniqueId,
   emailId: vars.inputPayload.emailId
  }]]]></db:input-parameters>
		</db:insert>
			<error-handler >
				<on-error-propagate enableNotifications="true" logException="true" doc:name="On Error Propagate" doc:id="17730e2c-f8d9-48af-ac93-04c31d918994" type="ANY">
					<async doc:name="Async" doc:id="8e2f386f-cf85-47bc-83e2-b595aec7ff5b" >
						<db:delete doc:name="Delete" doc:id="288c09bc-e89b-4952-958e-0c03eb9ab344" config-ref="Database_Config">
						<db:sql><![CDATA[DELETE FROM login WHERE id=:id]]></db:sql>
						<db:input-parameters><![CDATA[#[id:vars.loginId.id[0]]]]></db:input-parameters>
					</db:delete>
					</async>
				</on-error-propagate>
			</error-handler>
		</try>
		<set-variable value="#[output application/json&#10;---&#10;{&#10;    contact : if(!isEmpty(vars.inputPayload.contactDetails) and (vars.inputPayload.contactDetails != [{}])  )&#10;      true&#10;      else false,&#10;        statusFlag : if(!isEmpty(vars.inputPayload.statusFlag) and (vars.inputPayload.statusFlag != [{}])  )&#10;      true&#10;      else false,&#10;   aisIssue : if(!isEmpty(vars.inputPayload.aisIssue) and (vars.inputPayload.aisIssue != [{}])  )&#10;      true&#10;      else false,&#10;      rId: vars.loginId.id[0] default []&#10;}]" doc:name="Set condition" doc:id="91a64f35-13da-44a9-b8bb-94e842c555ad" variableName="commonData"/>
		<scatter-gather doc:name="Scatter-Gather" doc:id="e66d061b-3309-4af0-94c6-1fea18ca38b8" >
			<route >
				<choice doc:name="Create Contact" doc:id="f0e34ffc-f9f9-4675-a1c6-9a5df94f4d87">
			<when expression="#[vars.commonData.contact]">
						<try doc:name="Try" doc:id="36fcba1a-bc96-4ca3-9b71-a934b382a6f5">
							<db:bulk-insert doc:name="Bulk insert" doc:id="943c4863-bea4-4ae8-9e40-35a4236221ef" config-ref="Database_Config">
							<db:bulk-input-parameters><![CDATA[#[output application/java skipNullOn="everywhere"
---
vars.inputPayload.contactDetails  default [] map 
{
    "title" : $.title ,
    "firstName" : $.firstName ,
    "lastName" : $.lastName,
"relationship" : $.relationship ,
"address" : $.address ,
"postalCode" : $.postalCode ,
"telePhone1" : $.telePhone1 ,
"telePhone2" : $.telePhone2 ,
"mobile" : $.mobile ,
"fax" : $.fax ,
"emailPersonal" : $.emailPersonal ,
"emailWork" : $.emailWork ,
"notes" : $.notes ,
"private" : $."private" ,
"contactType" : $.contactType ,
"employeeId" : vars.commonData.rId

}]]]></db:bulk-input-parameters>
							<db:sql><![CDATA[insert into employeeContactDetails
(title,firstName,lastName,relationship,address,postalCode,
telePhone1,telePhone2,mobile,fax,emailPersonal,emailWork,notes,private,
contactType,employeeId
)

values 
(:title, :firstName, :lastName, :relationship, :address, :postalCode, :telePhone1, :telePhone2, :mobile, :fax, :emailPersonal, :emailWork, :notes, :private, :contactType, :employeeId
)]]></db:sql>
						</db:bulk-insert>
						 <error-handler ref="error-handlerError_Handler" />
						
						</try>
					</when>
		</choice>
			</route>
			<route >
				<choice doc:name="Create Status Flag" doc:id="26e39b94-72a1-423c-9674-3ee08a8df474">
					<when expression="#[vars.commonData.statusFlag]">
						<try doc:name="Try" doc:id="532b0cf9-1412-46e8-8410-44f128d6f5cd">
							<db:insert doc:name="Insert" doc:id="ed2b5728-8899-4a21-ab1d-3b1fe7a0b5d9" config-ref="Database_Config">
								<db:sql><![CDATA[insert into employeeStatusFlag (data,employeeId) values (:data,:employeeId)]]></db:sql>
								<db:input-parameters><![CDATA[#[output application/json skipNullOn="everywhere"
---
{data :  
	 write(vars.inputPayload.statusFlag, "application/json")
	
	 default "",
employeeId: vars.commonData.rId  
}]]]></db:input-parameters>
							</db:insert>
							  <error-handler ref="error-handlerError_Handler" />
						</try>
					</when>
				</choice>
			</route>
		</scatter-gather>
		<set-payload value='#[output application/json &#10;---&#10;{&#10;   "id": correlationId,&#10;   "dateTime": now(),&#10;   "status" : " Employee Created Successfully",&#10;   "employeeId": vars.commonData.rId&#10;    &#10;}]' doc:name="Set Response" doc:id="c374ab75-388d-48a3-ba92-b91873aa5510" />
	</sub-flow>
</mule>
